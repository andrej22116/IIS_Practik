;=============================================================;
;
; FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS
;
;=============================================================;

(deffunction ask-question (?question $?allowed-values)
    (printout t ?question)
    (bind ?answer (read))
    
    (if (lexemep ?answer) 
    then
        (bind ?answer (lowcase ?answer))
    )
    (while (not (member ?answer ?allowed-values)) do
        (printout t ?question)
        (bind ?answer (read))

        (if (lexemep ?answer) 
        then
            (bind ?answer (lowcase ?answer))
        )
    )

    ?answer
)

(deffunction yes-or-no-p (?question)
    (bind ?response (ask-question ?question yes no y n))
    (if (or (eq ?response yes) (eq ?response y)) 
    then
        TRUE
    else
        FALSE
    )
)



;=============================================================;
;
; RULES RULES RULES RULES RULES RULES RULES RULES RULES RULES
;
;=============================================================;

(defrule determine-engine-state
    (not (working-state engine ?))
    (not (repair ?))
    =>
    (if (yes-or-no-p "Does the engine start (yes/no)? ") then
        (if (yes-or-no-p "Does the engine run normally (yes/no)? ") 
        then
            (assert (working-state engine normal))          ; Двигатель работает нормально
        else
            (assert (working-state engine unsatisfactory))  ; Двигатель работает плохо
        )
    else
        (assert (working-state engine does-not-start))      ; Двигатель не запускается
    )
)

(defrule determine-rotation-state
    (working-state engine does-not-start)
    (not (rotation-state engine ?))
    (not (repair ?))
    =>
    (if (yes-or-no-p "Does the engine rotate (yes/no)? ") 
    then
        (assert (rotation-state engine rotates))            ; Двигатель вращается
        (assert (spark-state engine irregular-spark))       ; Плохая искра
    else
        (assert (Dotation-state engine does-not-rotate))    ; Двигатель не вращается
        (assert (spark-state engine does-not-spark))        ; Нет искры
    )
)

(defrule determine-gas-level
    (working-state engine does-not-start)
    (rotation-state engine rotates)
    (not (repair ?))
    =>
    (if (not (yes-or-no-p "Does the tank have any gas in it(yes/no)? ")) 
    then
        (assert (repair "Add gas.")) ; Машину необходимо заправить
    )
)

(defrule determine-battery-state
    (rotation-state engine does-not-rotate)
    (not (charge-state battery ?)) ; Состояние аккумулятора еще не определено
    (not (repair ?))
    =>
    (if (yes-or-no-p "Is the battery charged (yes/no)? ") 
    then
        (assert (charge-state battery charged)) ; Аккумулятор заряжен
    else
        (assert (repair "Charge the battery.")) ; Зарядите аккумулятор
        (assert (charge-state battery dead))    ; Аккумулятор разряжен
    )
)

(defrule determine-low-output
    (working-state engine unsatisfactory)
    (not (symptom engine low-output I not-low-output)) ; Мощность работы двигателя еще не определена
    (not (repair ?))
    =>
    (if (yes-or-no-p "Is the output of the engine low (yes/no)? ") 
    then
        (assert (symptom engine low-output))        ; Низкая выходная мощность двигателя
    else   
        (assert (symptom engine not-low-output))    ; Нормальная выходная мощность двигателя
    )
)

(defrule determine-point-surface-state
    (or 
        (and 
            (working-state engine does-not-start); Двигатель не заводится
            (spark-state engine irregular-spark) ; и плохая искра
        )   
        (symptom engine low-output) ; или низкая мощность
    )          
    (not (repair ?)) 
    =>
    (bind ?response (ask-question "What is the surface state of
        the points (normal/burned/contaminated)? " normal burned
        contaminated))

    (if (eq ?response burned) 
    then 
        (assert (repair "Replace the points."))     ; Контакты опалены — замените контакты
    else
        (if (eq ?response contaminated) then
            (assert (repair "Clean the points."))   ; Контакты загрязнены - почистите их
        )
    )
)

(defrule determine-conductivity-test
    (working-state engine does-not-start)
    (spark-state engine does-not-spark) ;нет искры
    (charge-state battery charged)      ;аккумулятор заряжен   
    (not (repair ?))
    =>
    (if (yes-or-no-p "Is the conductivity test for the ignition coil positive(yes/no)? ")
    then
        (assert (repair "Repair the distributor lead wire."))   ; Замените распределительные провода
    else
        (assert (repair "Replace the ignition coil."))          ; Замените катушку зажигания
    )
)

(defrule determine-sluggishness
    (working-state engine unsatisfactory)
    (not (repair ?))
    =>
    (if (yes-or-no-p "Is the engine sluggish (yes/no)? ")
    then
        (assert (repair "Clean the fuel line.")) ; Прочистите систему подачи топлива
    )
)

(defrule determine-misfiring
    (working-state engine unsatisfactory)
    (not (repair ?))
    =>
    (if (yes-or-no-p "Does the engine misfire (yes/no)? ")
    then
        (assert (repair "Point gap adjustment."))       ; Отрегулируйте зазоры между контактами
        (assert (spark-state engine irregular-spark))   ; Плохая искра
    )
)

(defrule determine-knocking
    (working-state engine unsatisfactory)
    (not (repair ?))
    =>
    (if (yes-or-no-p "Does the engine knock (yes/no)? ")
    then   
        (assert (repair "Timing adjustment.")) ; Отрегулируйте положение зажигания
    )
)


(defrule normal-engine-state-conclusions
    (declare (salience 10))
    (working-state engine normal) ; Если двигатель работает удовлетворительно
    =>
    ; то
    (assert (repair "No repair needed."))       ; ремонт не нужен
    (assert (spark-state engine normal))        ; зажигание в норме
    (assert (charge-state battery charged))     ; аккумулятор заряжен
    (assert (rotation-state engine rotates))    ; двигатель вращается
)

(defrule unsatisfactory-engine-state-conclusions
    (declare (salience 10))
    (working-state engine unsatisfactory) ; Если двигатель работает нормально
    =>
                                                ; то
    (assert (charge-state battery charged))     ; аккумулятор заряжен
    (assert (rotation-state engine rotates))    ; двигатель вращается
)

(defrule no-repairs
    (declare (salience -10))
    (not (repair ?))
    =>
    (assert (repair "Take your car to a mechanic."))
)

(defrule print-repair
    (declare (salience 10))
    (repair ?item)
    =>
    (printout t crlf crlf)
    (printout t "Suggested Repair:")
    (printout t crlf crlf)
    (format t " %s%n%n%n" ?item)
)

(defrule system-banner
    (declare (salience 15))
    =>
    (printout t crlf crlf)
    (printout t "**********************************" crlf)
    (printout t "* You, sobaki, ya Naruto Uzumaki *" crlf)
    (printout t "**********************************" crlf)
    (printout t crlf crlf)
)