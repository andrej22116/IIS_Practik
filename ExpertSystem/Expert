
;#####################################################################;
;#                                                                   #;
;#     GLOBALS   GLOBALS   GLOBALS   GLOBALS   GLOBALS   GLOBALS     #;
;#								     #;
;#####################################################################;

(defglobal ?*LAST_YEAR* = 2018)


;#####################################################################;
;#                                                                   #;
;#    GAMES    GAMES    GAMES    GAMES    GAMES    GAMES    GAMES    #;
;#								     #;
;#####################################################################;

(deftemplate Game
	(multislot Genre
		(cardinality 1 ?VARIABLE)
		(type STRING)
		(default ?NONE))
	(slot Name
		(type STRING)
		(default ?NONE))
	(slot Manufacturer
		(type STRING)
		(default ?NONE))
	(slot Year
		(type INTEGER)
		(range 1950 ?VARIABLE)
		(default-dynamic ?*LAST_YEAR*))
	(multislot Platform
		(type STRING)
		(default "PC"))
	(multislot OS
		(type STRING)
		(default "NONE"))
	(slot Duration
		(type INTEGER)
		(range 0 ?VARIABLE)
		(default 0))
	(multislot GameModes
		(type SYMBOL)
		(allowed-symbols singleplayer multiplayer)
		(default singleplayer))
	(slot Rating
		(type NUMBER)
		(range 0 10)
		(default 0))
	(slot Cost
		(type NUMBER)
		(range 0 ?VARIABLE)
		(default 0))
	(slot Description)
)

(deffacts	Games
	(Game
		(Name "The Sims")
		(Genre "simulator" "strategy")
		(Manufacturer "Maxis")
		(Year 2000)
		(Platform "PC" "PlayStation 2" "Xbox" "GameCube")
		(OS "Windows" "Mac OS X" )
		(Duration 999999)
		(GameModes singleplayer)
		(Rating 9)
		(Cost 5)
	)
	(Game
		(Name "The Sims 2")
		(Genre "simulator" "strategy")
		(Manufacturer "Maxis")
		(Year 2004)
		(Platform "PC" "Game Boy Advance" "GameCube" "Mac OS X" "Java ME" "Nintendo DS"  "PlayStation 2" "PlayStation Portable" "Xbox")
		(OS "Windows" "Mac OS X" )
		(Duration 999999)
		(GameModes singleplayer)
		(Rating 9)
		(Cost 10)
	)
	(Game
		(Name "The Sims 3")
		(Genre "simulator" "strategy")
		(Manufacturer "Maxis")
		(Year 2009)
		(Platform "PC" "Apple iOS" "Xbox 360" "Wii" "Nintendo DS" "PlayStation 3" "Nintendo 3DS" "Android" "Windows Phone" "Java")
		(OS "Windows" "Mac OS X")
		(Duration 999999)
		(GameModes singleplayer)
		(Rating 9)
		(Cost 15)
	)
	(Game
		(Name "The Sims 4")
		(Genre "simulator" "strategy")
		(Manufacturer "Maxis")
		(Year 2014)
		(Platform "PC" "PlayStation 4" "Xbox One")
		(OS "Windows" "Mac OS X" )
		(Duration 999999)
		(GameModes singleplayer)
		(Rating 9)
		(Cost 20)
	)
	(Game
		(Name "Risen")
		(Genre "RPG")
		(Manufacturer "Piranha Bytes")
		(Year 2009)
		(Platform "PC" "Xbox 360")
		(OS "Windows")
		(Duration 40)
		(GameModes singleplayer)
		(Rating 9)
		(Cost 10)
	)
	(Game
		(Name "Risen 2")
		(Genre "RPG")
		(Manufacturer "Piranha Bytes")
		(Year 2012)
		(Platform "PC" "Xbox 360" "PlayStation 3")
		(OS "Windows")
		(Duration 40)
		(GameModes singleplayer)
		(Rating 7)
		(Cost 10)
	)
	(Game
		(Name "Risen 3")
		(Genre "RPG")
		(Manufacturer "Piranha Bytes")
		(Year 2014)
		(Platform "PC" "Xbox 360" "PlayStation 4")
		(OS "Windows")
		(Duration 40)
		(GameModes singleplayer)
		(Rating 6)
		(Cost 15)
	)
	(Game
		(Name "RAGE")
		(Genre "shooter")
		(Manufacturer "id Software")
		(Year 2011)
		(Platform "PC" "Xbox 360" "PlayStation 3")
		(OS "Windows" "Mac OS X")
		(Duration 120)
		(GameModes singleplayer multiplayer)
		(Rating 6)
		(Cost 15)
	)
	(Game
		(Name "StarCraft")
		(Genre "RTS")
		(Manufacturer "Blizzard Entertainment")
		(Year 1998)
		(Platform "PC" "Nintendo 64")
		(OS "Windows" "Mac OS X")
		(Duration 40)
		(GameModes singleplayer multiplayer)
		(Rating 9)
		(Cost 15)
	)
	(Game
		(Name "StarCraft II: Wings of Liberty")
		(Genre "RTS")
		(Manufacturer "Blizzard Entertainment")
		(Year 2010)
		(Platform "PC")
		(OS "Windows" "Mac OS X")
		(Duration 50)
		(GameModes singleplayer multiplayer)
		(Rating 9)
		(Cost 30)
	)
)



;#####################################################################;
;#                                                                   #;
;#   FUNCTIONS        FUNCTIONS        FUNCTIONS        FUNCTIONS    #;
;#								     #;
;#####################################################################;

(deffunction askQuestion (?question $?allowed-values)
    (bind ?answer 0)
    (while TRUE
    do
        (printout t ?question)
        (bind ?answer (read))

        (if (lexemep ?answer)
        then
            (bind ?answer (lowcase ?answer))
        )
        (if (member ?answer ?allowed-values) then (break))
    )

    ?answer
)

(deffunction ask-YesNo (?question)
    (bind ?response (askQuestion ?question yes no y n))
    (if (or (eq ?response yes) (eq ?response y))
    then
        TRUE
    else
        FALSE
    )
)

(deffunction enterNumber (?message)
	(bind ?number 0)
	(while TRUE
	do
		(printout t ?message)
		(bind ?number (read))

		(if (integerp ?number) then (break))
	)

	?number
)




;#####################################################################;
;#                                                                   #;
;#    RULES    RULES    RULES    RULES    RULES    RULES    RULES    #;
;#                                                                   #;
;#####################################################################;

(defrule systemBanner "This is header on my simple expert system!"
    (declare (salience 15))
    =>
    (printout t crlf crlf)
    (printout t " +────────────────────────────────────────────────────────────────────────────+" crlf)
    (printout t " |       ────────           Computer games magazine           ────────        |" crlf)
    (printout t " | ╔══╦══╦╗  ╔╦═══╦╗╔╦════╦═══╦═══╗ ╔═══╦══╦╗  ╔╦═══╦══╗ ╔╗╔╗╔╦══╦═══╦╗ ╔══╗  |" crlf)
    (printout t " | ║╔═╣╔╗║║  ║║╔═╗║║║╠═╗╔═╣╔══╣╔═╗║ ║╔══╣╔╗║║  ║║╔══╣╔═╝ ║║║║║║╔╗║╔═╗║║ ║╔╗╚╗ |" crlf)
    (printout t " | ║║ ║║║║╚╗╔╝║╚═╝║║║║ ║║ ║╚══╣╚═╝║ ║║╔═╣╚╝║╚╗╔╝║╚══╣╚═╗ ║║║║║║║║║╚═╝║║ ║║╚╗║ |" crlf)
    (printout t " | ║║ ║║║║╔╗╔╗║╔══╣║║║ ║║ ║╔══╣╔╗╔╝ ║║╚╗║╔╗║╔╗╔╗║╔══╩═╗║ ║║║║║║║║║╔╗╔╣║ ║║ ║║ |" crlf)
    (printout t " | ║╚═╣╚╝║║╚╝║║║  ║╚╝║ ║║ ║╚══╣║║║  ║╚═╝║║║║║╚╝║║╚══╦═╝║ ║╚╝╚╝║╚╝║║║║║╚═╣╚═╝║ |" crlf)
    (printout t " | ╚══╩══╩╝  ╚╩╝  ╚══╝ ╚╝ ╚═══╩╝╚╝  ╚═══╩╝╚╩╝  ╚╩═══╩══╝ ╚═╝╚═╩══╩╝╚╝╚══╩═══╝ |" crlf)
    (printout t " | ~ ©Andrey Stseniayew simple expert system project ~ Me and Kate - friends! |" crlf)
    (printout t " +────────────────────────────────────────────────────────────────────────────+" crlf)
    (printout t crlf crlf)
)

(defrule askAge "Ask user age!"
	(declare (salience 14))
	(not (UserAge ?))
	=>
	(assert (UserAge (enterNumber "Your age:> ")))
)

(defrule askGender "Ask user gender!"
	(declare (salience 13))
	(not (UserGender ?))
	=>
	(assert (UserGender (askQuestion "Your gender[male/female]:> " male female)))
)

(defrule askLikeHorrors "Ask user like Horror games? :3"
	(UserAge ?age&:(>= ?age 18))
	(not (UserLike ?))
	=>
	(if (ask-YesNo "Do yo like horror games?:> ")
	then
		(assert (UserLike Horror))
	)
)

(defrule askLikeSendbox "Ask user like sendbox games"
	(not (UserLike ?))
	=>
	(if (ask-YesNo "Do yo like sendbox games?:> ")
	then
		(assert (UserLike Sendbox))
	)
)

(defrule askLikeFPS "Ask user like fps games"
	(not (UserLike ?))
	=>
	(if (ask-YesNo "Do yo like fps games?:> ")
	then
		(assert (UserLike FPS))
	)
)

(defrule askLikeStrategy "Ask user like strategy games"
	(not (UserLike ?))
	=>
	(if (ask-YesNo "Do yo like strategy games?:> ")
	then
		(assert (UserLike Strategy))
	)
)

(defrule askLikeRTS "Ask user like strategy games"
	(UserLike Strategy)
	=>
	(if (ask-YesNo "Do yo like real time strategy games?:> ")
	then
		(assert (UserLikeRTS TRUE))
	else
		(assert (UserLikeRTS FALSE))
	)
)

(defrule askLikeSooters "Ask user like shooter games"
	(not (UserLike ?))
	=>
	(if (ask-YesNo "Do yo like shooter games?:> ")
	then
		(assert (UserLike Shooter))
	)
)

(defrule askLikeAction "Ask user like action games"
	(not (UserLike ?))
	=>
	(if (ask-YesNo "Do yo like action games?:> ")
	then
		(assert (UserLike Action))
	)
)

(defrule askAfraidOfBlood "Ask user afraid of blood"
	(declare (salience 12))
	=>
	(if (ask-YesNo "Do yo afraid of blood in games or life?:> ")
	then
		(assert (UserAfraidOfBlood TRUE))
	else
		(assert (UserAfraidOfBlood FALSE))
	)
)
